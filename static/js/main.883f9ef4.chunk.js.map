{"version":3,"sources":["images/pin.svg","serviceWorker.js","components/Search.js","components/Map.js","components/Result.js","App.js","index.js"],"names":["module","exports","__webpack_require__","p","Boolean","window","location","hostname","match","Search","handleSearch","_this","validateSearch","props","search","value","join","this","length","_this2","react_default","a","createElement","className","htmlFor","id","type","placeholder","ref","input","onClick","Component","Marker","_ref","text","style","color","backgroundImage","pin","backgroundSize","backgroundPosition","backgroundRepeat","width","height","display","alignItems","transform","Map","lib_default","bootstrapURLKeys","key","defaultCenter","center","defaultZoom","zoom","Map_Marker","lat","lng","defaultProps","Result","handleClose","_this$props","address","logradouro","bairro","concat","localidade","uf","cep","components_Map","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","setState","asyncToGenerator","regenerator_default","mark","_callee","responseAddress","response","_ref2","results","wrap","_context","prev","next","fetch","sent","json","gia","city","geometry","stop","_x","apply","arguments","state","src_components_Search","src_components_Result","ReactDOM","render","BrowserRouter","Switch","Route","path","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,6PCYpBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iICkBSC,0NAhCbC,aAAe,WACRC,EAAKC,mBACVD,EAAKE,MAAMH,aAAaC,EAAKG,OAAOC,MAAMP,MAAM,QAAQQ,KAAK,KAC7DL,EAAKG,OAAOC,MAAQ,qFAIpB,OAAOE,KAAKH,OAAOC,MAAMG,QAAU,mCAG5B,IAAAC,EAAAF,KACUF,EAAYE,KAArBJ,MAASE,MAEjB,OACEK,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAAd,aACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,SAAOE,QAAQ,UAAf,OACAJ,EAAAC,EAAAC,cAAA,SACEG,GAAG,SACHC,KAAK,OACLC,YAAY,WACZC,IAAK,SAAAC,GAAK,OAAIV,EAAKL,OAASe,GAC5Bd,MAAOA,IAETK,EAAAC,EAAAC,cAAA,UAAQI,KAAK,SAASI,QAASb,KAAKP,cAApC,mBA1BWqB,wDCGfC,EAAS,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,KAAH,OACbd,EAAAC,EAAAC,cAAA,OAAKa,MAAO,CACVC,MAAO,QACPC,gBAAiB,OAASC,IAAM,IAChCC,eAAgB,UAChBC,mBAAoB,SACpBC,iBAAkB,YAClBC,MAAO,OACPC,OAAQ,OACRC,QAAS,cACTC,WAAY,SACZC,UAAW,0BAEVZ,IAICa,mLASK,IACUzC,EAAeW,KAAxBJ,MAASP,SAEjB,OACEc,EAAAC,EAAAC,cAAA,OAAKa,MAAO,CAAEQ,OAAQ,QAASD,MAAO,SACpCtB,EAAAC,EAAAC,cAAC0B,EAAA3B,EAAD,CACE4B,iBAAkB,CAAEC,IAAK,2CACzBC,cAAelC,KAAKJ,MAAMuC,OAC1BC,YAAapC,KAAKJ,MAAMyC,KACxBF,OAAQ9C,GAERc,EAAAC,EAAAC,cAACiC,EAAD,CACEC,IAAKlD,EAASkD,IACdC,IAAKnD,EAASmD,eAtBR1B,aAAZgB,EACGW,aAAe,CACpBN,OAAQ,CACNI,IAAK,MACLC,IAAK,OAEPH,KAAM,IA4BKP,QCpBAY,6MAhCbC,YAAc,WACZjD,EAAKE,MAAM+C,uFAGJ,IAAAC,EACkC5C,KAAjCJ,MAASiD,EADVD,EACUC,QAASxD,EADnBuD,EACmBvD,SAE1B,OACEc,EAAAC,EAAAC,cAAA,OACEC,UAAU,SACVY,MAAO,CAAES,QAASkB,EAAU,QAAU,SAEtC1C,EAAAC,EAAAC,cAAA,UACEI,KAAK,SACLH,UAAU,QACVO,QAASb,KAAK2C,aAHhB,SAMAxC,EAAAC,EAAAC,cAAA,WAASC,UAAU,WACjBH,EAAAC,EAAAC,cAAA,YAAOwC,GAAWA,EAAQC,YAAkB3C,EAAAC,EAAAC,cAAA,WAC3CwC,GAAWA,EAAQE,OAAO5C,EAAAC,EAAAC,cAAA,WAC1BwC,GAAO,GAAAG,OAAOH,EAAQI,WAAf,OAAAD,OAA+BH,EAAQK,IAAK/C,EAAAC,EAAAC,cAAA,WACnDwC,GAAWA,EAAQM,KAEtBhD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACZjB,EAAWc,EAAAC,EAAAC,cAAC+C,EAAD,CAAK/D,SAAUA,IAAe,iBA1B/ByB,aCmDNuC,cAhDb,SAAAA,EAAYzD,GAAO,IAAAF,EAAA,OAAA4D,OAAAC,EAAA,EAAAD,CAAAtD,KAAAqD,IACjB3D,EAAA4D,OAAAE,EAAA,EAAAF,CAAAtD,KAAAsD,OAAAG,EAAA,EAAAH,CAAAD,GAAAK,KAAA1D,KAAMJ,KAOR+C,YAAc,WACZjD,EAAKiE,SAAS,CACVd,QAAS,KACTxD,SAAU,QAXGK,EAenBD,aAfmB,eAAAuB,EAAAsC,OAAAM,EAAA,EAAAN,CAAAO,EAAAzD,EAAA0D,KAeJ,SAAAC,EAAOZ,GAAP,IAAAa,EAAAnB,EAAAoB,EAAAC,EAAAC,EAAA9E,EAAA,OAAAwE,EAAAzD,EAAAgE,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACiBC,MAAK,4BAAAxB,OAA6BG,EAA7B,WADtB,cACPa,EADOK,EAAAI,KAAAJ,EAAAE,KAAA,EAESP,EAAgBU,OAFzB,cAEP7B,EAFOwB,EAAAI,KAAAJ,EAAAE,KAAA,EAGUC,MAAK,6DAAAxB,OAA8DH,EAAQ8B,IAAtE,KAAA3B,OAA6EH,EAAQC,WAArF,MAAAE,OAAoGH,EAAQ+B,KAA5G,MAAA5B,OAAqHH,EAAQK,GAA7H,iDAHf,cAGPe,EAHOI,EAAAI,KAAAJ,EAAAE,KAAA,GAIaN,EAASS,OAJtB,QAAAR,EAAAG,EAAAI,KAILN,EAJKD,EAILC,QACF9E,EAAW8E,EAAQ,GAAGU,SAASxF,SACrCK,EAAKiE,SAAS,CAAEd,UAASxD,aANZ,yBAAAgF,EAAAS,SAAAf,EAAA/D,SAfI,gBAAA+E,GAAA,OAAA/D,EAAAgE,MAAAhF,KAAAiF,YAAA,GAGjBvF,EAAKwF,MAAQ,CACXrC,QAAS,MAJMnD,wEAyBjB,OACES,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAC8E,EAAD,CACE1F,aAAcO,KAAKP,iBAIzBU,EAAAC,EAAAC,cAAA,QAAMC,UAAU,YACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAC+E,EAAD,CACEvC,QAAS7C,KAAKkF,MAAMrC,QACpBxD,SAAUW,KAAKkF,MAAM7F,SACrBsD,YAAa3C,KAAK2C,wBAxCd7B,aCGlBuE,IAASC,OACPnF,EAAAC,EAAAC,cAACkF,EAAA,EAAD,KACEpF,EAAAC,EAAAC,cAACmF,EAAA,EAAD,KACErF,EAAAC,EAAAC,cAACoF,EAAA,EAAD,CAAOC,KAAK,IAAIC,UAAWtC,MAG/BuC,SAASC,eAAe,SLkHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.883f9ef4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pin.bbb83361.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react';\nimport './Search.css';\n\nclass Search extends Component {\n  handleSearch = () => {\n    if (!this.validateSearch()) return;\n    this.props.handleSearch(this.search.value.match(/\\d+/g).join([]));\n    this.search.value = '';\n  }\n\n  validateSearch() {\n    return this.search.value.length >= 8;\n  }\n\n  render() {\n    const { props: { value } } = this;\n\n    return (\n      <div className=\"search\">\n        <h1 className=\"title\">Consultar</h1>\n        <div className=\"form-group\">\n          <label htmlFor=\"search\">CEP</label>\n          <input\n            id=\"search\"\n            type=\"text\"\n            placeholder=\"02050010\"\n            ref={input => this.search = input}\n            value={value}\n          />\n          <button type=\"button\" onClick={this.handleSearch}>Buscar</button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Search;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport GoogleMapReact from 'google-map-react';\n\nimport pin from '../images/pin.svg';\n\nconst Marker = ({ text }) => (\n  <div style={{\n    color: 'white',\n    backgroundImage: 'url(' + pin + ')',\n    backgroundSize: 'contain',\n    backgroundPosition: 'center',\n    backgroundRepeat: 'no-repeat',\n    width: '50px',\n    height: '50px',\n    display: 'inline-flex',\n    alignItems: 'center',\n    transform: 'translate(-50%, -50%)'\n  }}>\n    {text}\n  </div>\n);\n\nclass Map extends Component {\n  static defaultProps = {\n    center: {\n      lat: 59.95,\n      lng: 30.33\n    },\n    zoom: 16,\n  };\n\n  render() {\n    const { props: { location } } = this;\n\n    return (\n      <div style={{ height: '400px', width: '100%' }}>\n        <GoogleMapReact\n          bootstrapURLKeys={{ key: 'AIzaSyAuf_OHJWTlUcpsMUV4yqi3TBeLq0JhVAU' }}\n          defaultCenter={this.props.center}\n          defaultZoom={this.props.zoom}\n          center={location}\n        >\n          <Marker\n            lat={location.lat}\n            lng={location.lng}\n          />\n        </GoogleMapReact>\n      </div>\n    );\n  }\n}\n\nMap.propTypes = {\n  location: PropTypes.object.isRequired,\n};\n\nexport default Map;\n","import React, { Component } from 'react';\nimport './Result.css';\nimport Map from './Map';\n\nclass Result extends Component {\n  handleClose = () => {\n    this.props.handleClose();\n  }\n\n  render() {\n    const { props: { address, location } } = this;\n\n    return (\n      <div\n        className=\"result\"\n        style={{ display: address ? 'block' : 'none' }}\n      >\n        <button\n          type=\"button\"\n          className=\"close\"\n          onClick={this.handleClose}\n        >Close</button>\n\n        <address className=\"address\">\n          <span>{address && address.logradouro}</span><br />\n          {address && address.bairro}<br />\n          {address && `${address.localidade} - ${address.uf}`}<br />\n          {address && address.cep}\n        </address>\n        <div className=\"map\">\n          {location ? <Map location={location} /> : 'error'}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Result;\n","import React, { Component } from 'react';\nimport './App.css';\n\nimport Search from './components/Search';\nimport Result from './components/Result';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      address: null,\n    };\n  }\n\n  handleClose = () => {\n    this.setState({\n        address: null,\n        location: null,\n    });\n  }\n\n  handleSearch = async (cep) => {\n    const responseAddress = await fetch(`https://viacep.com.br/ws/${cep}/json/`);\n    const address = await responseAddress.json();\n    const response = await fetch(`https://maps.googleapis.com/maps/api/geocode/json?address=${address.gia}+${address.logradouro},+${address.city},+${address.uf}&key=AIzaSyAuf_OHJWTlUcpsMUV4yqi3TBeLq0JhVAU`);\n    const { results } = await response.json();\n    const location = results[0].geometry.location;\n    this.setState({ address, location });\n  }\n\n  render() {\n    return (\n      <div className=\"app\">\n        <header className=\"app-header\">\n          <div className=\"container\">\n            <Search\n              handleSearch={this.handleSearch}\n            ></Search>\n          </div>\n        </header>\n        <main className=\"app-main\">\n          <div className=\"container\">\n            <Result\n              address={this.state.address}\n              location={this.state.location}\n              handleClose={this.handleClose}\n            ></Result>\n          </div>\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\n\nimport './index.css';\n\nimport App from './App';\n\nReactDOM.render(\n  <BrowserRouter>\n    <Switch>\n      <Route path=\"/\" component={App} />\n    </Switch>\n  </BrowserRouter>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}